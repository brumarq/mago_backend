name: Device Firmware Orchestrator CI/CD

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "DeviceFirmwareOrchestrator/**/*"

env:
  # OpenShift Configuration
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_TEST_TOKEN: ${{ secrets.OPENSHIFT_TOKEN_TEST }}
  OPENSHIFT_NAMESPACE: mago-backend
  OPENSHIFT_TEST_NAMESPACE: mago-backend-test
  APP_NAME: device-firmware-orchestrator
  APP_PORT: 8383

  # Docker Configuration
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME_BRUNO }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_BRUNO }}
  
  # Auth0 Configuration
  AUTH0_DOMAIN: ${{secrets.AUTH0_DOMAIN}}
  AUTH0_TEST_DOMAIN: ${{secrets.AUTH0_DOMAIN_TEST}}
  AUTH0_AUDIENCE: ${{secrets.AUTH0_AUDIENCE}}
  AUTH0_TEST_AUDIENCE: ${{secrets.AUTH0_AUDIENCE_TEST}}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_TEST_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID_TEST }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_TEST_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET_TEST }}

jobs:
  docker-upload:
    name: Deploy docker container
    runs-on: ubuntu-20.04
    environment: device-firmware-orchestrator-production

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build from Dockerfile
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: latest
          dockerfiles: ./DeviceFirmwareOrchestrator/Dockerfile
          context: ./DeviceFirmwareOrchestrator/

      - name: Login to Docker Hub with Buildah
        run: buildah login --username ${{ env.DOCKER_HUB_USERNAME }} --password ${{ env.DOCKER_HUB_ACCESS_TOKEN }} docker.io

      - name: Push image to Docker Hub
        run: buildah push "${{ env.APP_NAME }}:latest" "docker://docker.io/brumarq/${{ env.APP_NAME }}:latest"

  deploy-test-env:
    runs-on: ubuntu-20.04
    needs: docker-upload
    name: Deploy Test Environment
    environment: device-firmware-orchestrator-test

    steps:
      - uses: actions/checkout@v2 # Check Out Code
      - uses: redhat-actions/oc-login@v1 # Install OC cli and login
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TEST_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_TEST_NAMESPACE }}
      - name: Deploy to test environment 
        run: |
          oc apply -f ./oc-deployments/${{ env.APP_NAME }}.yaml -n ${{ env.OPENSHIFT_TEST_NAMESPACE }}

      - name: Update deployment config to current date
        run: |
          oc patch deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_TEST_NAMESPACE }} -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"

      - name: Set environment variables 
        run: |
          oc set env deployment/${{ env.APP_NAME }} \
          Auth0__Domain=${{ env.AUTH0_TEST_DOMAIN }} \
          Auth0__Audience=${{ env.AUTH0_TEST_AUDIENCE }} \
          Auth0__ClientId=${{ env.AUTH0_TEST_CLIENT_ID }} \
          Auth0__ClientSecret=${{ env.AUTH0_TEST_CLIENT_SECRET }} \
          
      - name: Create service if non-existent
        run: |
          SERVICE_EXISTS=$(oc get svc ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_TEST_NAMESPACE }} --ignore-not-found)
          if [ -z "$SERVICE_EXISTS" ]; then
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} --target-port=${{ env.APP_PORT }} --name=${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_TEST_NAMESPACE }}
          fi
    
      - name: Create route if non-existent
        run: |    
            ROUTE_EXISTS=$(oc get route ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_TEST_NAMESPACE }} --ignore-not-found)
            if [ -z "$ROUTE_EXISTS" ]; then
              oc create route edge --service=${{ env.APP_NAME }}-service --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_TEST_NAMESPACE }}
            fi
  
  run-integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-test-env
    name: Execute Integration Tests
    steps:
      - uses: actions/checkout@v3 # Check Out Code
      - uses: actions/setup-dotnet@v3 # Setup .NET Environment
        with:
          dotnet-version: 6.0.x
      - name: Restore .NET Dependencies
        run: dotnet restore ServiceTests/ServiceTests.sln
      - name: Build .NET Project
        run: dotnet build ServiceTests/ServiceTests.sln --no-restore
      - name: Run .NET Integration Tests
        run: dotnet test ServiceTests/ServiceTests.sln --no-build --verbosity normal
        env:
          AdminJWTToken: ${{ secrets.JWT_ADMIN_TEST_TOKEN }}
          ClientJWTToken: ${{ secrets.JWT_CLIENT_TEST_TOKEN }}
          ForbiddenClientJWTToken: ${{ secrets.JWT_CLIENT_FORBIDDEN_TEST_TOKEN }}
          InvalidToken: ${{secrets.JWT_INVALID_TEST_TOKEN}}

  deploy-production-env:
    runs-on: ubuntu-20.04
    needs: run-integration-tests
    name: Deploy Production Environment
    environment: device-firmware-orchestrator-production

    steps:
      - uses: actions/checkout@v2 # Check Out Code
      - uses: redhat-actions/oc-login@v1 # Install OC cli and login
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
      - name: Deploy to production environment 
        run: |
          oc apply -f ./oc-deployments/${{ env.APP_NAME }}.yaml -n ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Update deployment config to current date
        run: |
          oc patch deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"

      - name: Set environment variables 
        run: |
          oc set env deployment/${{ env.APP_NAME }} \
          Auth0__Domain=${{ env.AUTH0_DOMAIN }} \
          Auth0__Audience=${{ env.AUTH0_AUDIENCE }} \
          Auth0__ClientId=${{ env.AUTH0_CLIENT_ID }} \
          Auth0__ClientSecret=${{ env.AUTH0_CLIENT_SECRET }} \

      - name: Create service if non-existent
        run: |
          SERVICE_EXISTS=$(oc get svc ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$SERVICE_EXISTS" ]; then
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} --target-port=${{ env.APP_PORT }} --name=${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi
  
      - name: Create route if non-existent
        run: |    
          ROUTE_EXISTS=$(oc get route ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$ROUTE_EXISTS" ]; then
            oc create route edge --service=${{ env.APP_NAME }}-service --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi
