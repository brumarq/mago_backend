name: Metrics Microservice CI/CD

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - 'MetricsPython/**/*'

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: mago-backend
  APP_NAME: metrics-microservice
  APP_PORT: 5000

  # Required environment variables for the Python app.
  AZURE_SQL_DRIVER: ${{ secrets.AZURE_SQL_DRIVER }}
  AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
  AZURE_SQL_HOST: ${{ secrets.AZURE_SQL_HOST }}
  AZURE_SQL_DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
  AZURE_SQL_UID: ${{ secrets.AZURE_SQL_UID }}
  AZURE_SQL_PWD: ${{ secrets.AZURE_SQL_PWD }}
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}

jobs:
  flask-app-unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r MetricsPython/requirements.txt

      - name: Run tests
        run: pytest

  docker-upload:
    name: Deploy Docker Container
    runs-on: ubuntu-20.04
    needs: flask-app-unit-tests
    environment: production

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build from Dockerfile
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: latest
          dockerfiles: ./MetricsPython/Dockerfile
          context: ./MetricsPython/ #idk if needed

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push to Docker Hub
        run: docker build -t docker.io/library/metrics-microservice:latest .

  # build-deploy: a
  #   runs-on: ubuntu-20.04
  #   needs: docker-upload
  #   name: Deploy to OpenShift
  #   environment: production

  #   steps:
  #   - name: Check out repository
  #     uses: actions/checkout@v3

  #   - name: Install oc CLI
  #     uses: redhat-actions/openshift-tools-installer@v1
  #     with:
  #       oc: 4

  #   - name: Log in to OpenShift
  #     uses: redhat-actions/oc-login@v1
  #     with:
  #       openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
  #       openshift_token: ${{ env.OPENSHIFT_TOKEN }}
  #       insecure_skip_tls_verify: true
  #       namespace: ${{ env.OPENSHIFT_NAMESPACE }}

  #   - name: Deploy to OpenShift
  #     run: |
  #       DEPLOYMENT_EXISTS=$(oc get deployment ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
    
  #       if [ -n "$DEPLOYMENT_EXISTS" ]; then
  #         CONTAINER_NAME=$(oc get deployment ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} -o=jsonpath='{.spec.template.spec.containers[0].name}')
  #         oc set image deployment/${{ env.APP_NAME }} $CONTAINER_NAME=docker.io/yourusername/${{ env.APP_NAME }}:latest -n ${{ env.OPENSHIFT_NAMESPACE }}
  #         oc rollout restart deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
  #       else
  #         oc new-app docker.io/yourusername/${{ env.APP_NAME }}:latest -n ${{ env.OPENSHIFT_NAMESPACE }}
  #       fi

  #       oc expose svc ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
