name: Metrics Microservice CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ "main", "development" ]
    paths:
      - 'MetricsPython/**/*'

env:
  # General Configuration
  APP_NAME: metrics-microservice
  APP_PORT: 5000
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}

  # OpenShift Configuration
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ github.ref == 'refs/heads/main' && secrets.OPENSHIFT_TOKEN || secrets.OPENSHIFT_TOKEN_TEST }}
  OPENSHIFT_NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'mago-backend' || 'mago-backend-test' }}
  
  # Docker Configuration
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME_BRUNO }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_BRUNO }}

  # Auth0 Configuration
  AUTH0_DOMAIN: ${{ github.ref == 'refs/heads/main' && secrets.AUTH0_DOMAIN_NO_HTTPS || secrets.AUTH0_DOMAIN_NO_HTTPS_TEST }}
  AUTH0_AUDIENCE: ${{ github.ref == 'refs/heads/main' && secrets.AUTH0_AUDIENCE || secrets.AUTH0_AUDIENCE_TEST }}

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          cd MetricsPython
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Unit Tests
        run: pytest

  build-and-push-docker:
    runs-on: ubuntu-20.04
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3
      - name: Build and Push Docker Image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.ENVIRONMENT }}
          dockerfiles: ./MetricsPython/Dockerfile
          context: ./MetricsPython/
      - name: Login to Docker Registry
        run: buildah login --username ${{ env.DOCKER_HUB_USERNAME }} --password ${{ env.DOCKER_HUB_ACCESS_TOKEN }} docker.io
      - name: Push Docker Image
        run: buildah push "${{ env.APP_NAME }}:${{ env.ENVIRONMENT }}" "docker://docker.io/brumarq/${{ env.APP_NAME }}:${{ env.ENVIRONMENT }}"

  deploy:
    runs-on: ubuntu-20.04
    needs: build-and-push-docker
    environment: metricsms-${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}
    steps:
      - uses: actions/checkout@v2

      - uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ github.ref == 'refs/heads/main' && 'mago-backend' || 'mago-backend-test' }}
      
      - name: Update YAML with Current Timestamp
        run: |
          CURRENT_TIMESTAMP=$(date +%Y%m%d%H%M%S)
          sed -i "s/\${TIMESTAMP}/${CURRENT_TIMESTAMP}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Set Image Version
        run: |
          sed -i "s/\${ENVIRONMENT}/${{env.ENVIRONMENT}}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Deploy to OpenShift
        run: |
          oc apply -f ./oc-deployments/${{ env.APP_NAME }}.yaml -n ${{ env.OPENSHIFT_NAMESPACE }}
          
      - name: Set environment variables 
        run: |
          oc set env deployment/${{ env.APP_NAME }} \
          METRICS_DB_CONNECTION_STRING_SQLALCHEMY=${{ secrets.METRICS_DB_CONNECTION_STRING_SQLALCHEMY }} \
          AUTH0_DOMAIN=${{ env.AUTH0_DOMAIN }} \
          AUTH0_AUDIENCE=${{ env.AUTH0_AUDIENCE }}

      - name: Create service if non-existent
        run: |
          SERVICE_EXISTS=$(oc get svc ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$SERVICE_EXISTS" ]; then
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} --target-port=${{ env.APP_PORT }} --name=${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi

      - name: Create route if non-existent
        run: |    
          ROUTE_EXISTS=$(oc get route ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$ROUTE_EXISTS" ]; then
            oc create route edge --service=${{ env.APP_NAME }}-service --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi

      # Step to check the deployment status
      - name: Check Deployment Status
        id: check_status
        run: |
          if ! oc rollout status deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} --watch --timeout=150s; then
            echo "::set-output name=deployment_success::false"
          else
            echo "::set-output name=deployment_success::true"
          fi
      
      # Step to rollback if deployment fails
      - name: Rollback Deployment
        if: steps.check_status.outputs.deployment_success != 'true'
        run: |
          echo "Deployment failed. Rolling back to previous version."
          oc rollout undo deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          echo "Rollback was executed and succeeded."
          echo "rollback_executed=true" >> $GITHUB_ENV
      
      # Step to fail the pipeline after a successful rollback
      - name: Fail Pipeline
        if: env.rollback_executed == 'true'
        run: |
          echo "Rollback was successful. Creating an issue."

          # Create an issue
          gh issue create \
          --title "Deployment Rollback Executed for ${{ env.APP_NAME }}" \
          --body "The deployment of ${{ env.APP_NAME }} failed and a rollback was executed. Further investigation is required."

          # Fail the pipeline
          echo "Failing the pipeline."
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}