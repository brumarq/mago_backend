name: Notifications Service CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ "main", "development" ]
    paths:
      - 'NotificationMS/**/*'

env:
  # General Configuration
  APP_NAME: notifications-microservice
  APP_PORT: 8282
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}

  # OpenShift Configuration
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ github.ref == 'refs/heads/main' && secrets.OPENSHIFT_TOKEN || secrets.OPENSHIFT_TOKEN_TEST }}
  OPENSHIFT_NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'mago-backend' || 'mago-backend-test' }}
  
  # Docker Configuration
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME_BRUNO }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_BRUNO }}

  # Auth0 Configuration
  AUTH0_DOMAIN: ${{ github.ref == 'refs/heads/main' && secrets.AUTH0_DOMAIN || secrets.AUTH0_DOMAIN_TEST }}
  AUTH0_AUDIENCE: ${{ github.ref == 'refs/heads/main' && secrets.AUTH0_AUDIENCE || secrets.AUTH0_AUDIENCE_TEST }}
  AUTH0_CLIENT_ID: ${{ github.ref == 'refs/heads/main' && secrets.AUTH0_CLIENT_ID || secrets.AUTH0_CLIENT_ID_TEST }}
  AUTH0_CLIENT_SECRET: ${{ github.ref == 'refs/heads/main' && secrets.AUTH0_CLIENT_SECRET || secrets.AUTH0_CLIENT_SECRET_TEST }}

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore NotificationMS/NotificationMS.sln
      - name: Build
        run: dotnet build NotificationMS/NotificationMS.sln --no-restore
      - name: Run Unit Tests
        run: dotnet test NotificationMS/NotificationMS.sln --no-build --verbosity normal

  build-and-push-docker:
    runs-on: ubuntu-20.04
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3
      - name: Build and Push Docker Image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.ENVIRONMENT }}
          dockerfiles: ./NotificationMS/Dockerfile
          context: ./NotificationMS/
      - name: Login to Docker Registry
        run: buildah login --username ${{ env.DOCKER_HUB_USERNAME }} --password ${{ env.DOCKER_HUB_ACCESS_TOKEN }} docker.io
      - name: Push Docker Image
        run: buildah push "${{ env.APP_NAME }}:${{ env.ENVIRONMENT }}" "docker://docker.io/brumarq/${{ env.APP_NAME }}:${{ env.ENVIRONMENT }}"

  deploy:
    runs-on: ubuntu-20.04
    needs: build-and-push-docker
    environment: notificationsms-${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}
    steps:
      - uses: actions/checkout@v2

      - uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ github.ref == 'refs/heads/main' && 'mago-backend' || 'mago-backend-test' }}
      
      - name: Update YAML with Current Timestamp
        run: |
          CURRENT_TIMESTAMP=$(date +%Y%m%d%H%M%S)
          sed -i "s/\${TIMESTAMP}/${CURRENT_TIMESTAMP}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Set Image Version
        run: |
          sed -i "s/\${ENVIRONMENT}/${{env.ENVIRONMENT}}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Deploy to OpenShift
        run: |
          oc apply -f ./oc-deployments/${{ env.APP_NAME }}.yaml -n ${{ env.OPENSHIFT_NAMESPACE }}
          
      - name: Set environment variables
        run: |
          oc set env deployment/${{ env.APP_NAME }} \
          ConnectionStrings__NotificationsDb=${{ secrets.NOTIFICATIONS_DB_CONNECTION_STRING }} \
          Auth0__Domain=${{ env.AUTH0_DOMAIN }} \
          Auth0__Audience=${{ env.AUTH0_AUDIENCE }} \
          Auth0__ClientId=${{ env.AUTH0_CLIENT_ID }} \
          Auth0__ClientSecret=${{ env.AUTH0_CLIENT_SECRET }} \
          OrchestratorApiKey=${{ secrets.ORCHESTRATORAPIKEY }}

      - name: Create service if non-existent
        run: |
          SERVICE_EXISTS=$(oc get svc ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$SERVICE_EXISTS" ]; then
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} --target-port=${{ env.APP_PORT }} --name=${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi

      - name: Create route if non-existent
        run: |    
          ROUTE_EXISTS=$(oc get route ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$ROUTE_EXISTS" ]; then
            oc create route edge --service=${{ env.APP_NAME }}-service --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi

      - name: Check Deployment and Handle Failure
        run: |
          if ! oc rollout status deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} --watch --timeout=150s; then
            echo "Deployment failed. Rolling back to previous version."
            oc rollout undo deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}

            echo "Creating GitHub issue for deployment failure."
            gh issue create \
            --title "Deployment Rollback Executed for ${{ env.APP_NAME }} - ${{ env.ENVIRONMENT }} environment" \
            --body "The deployment of ${{ env.APP_NAME }} failed and a rollback was executed in the ${{ env.ENVIRONMENT }} environment. Further investigation is required."

            echo "Exiting with failure status."
            exit 1
          else
            echo "Deployment was successful."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

