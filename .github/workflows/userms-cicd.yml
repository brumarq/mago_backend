name: User Service CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ "main", "development" ]
    paths:
      - 'UserMS/**/*'

env:
  # OpenShift Configuration
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_TEST_TOKEN: ${{ secrets.OPENSHIFT_TOKEN_TEST }}
  OPENSHIFT_NAMESPACE: mago-backend
  OPENSHIFT_TEST_NAMESPACE: mago-backend-test
  APP_NAME: user-microservice
  APP_PORT: 8080

  # Docker Configuration
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME_BRUNO }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_BRUNO }}

  # Auth0 Configuration
  AUTH0_DOMAIN: ${{secrets.AUTH0_DOMAIN}}
  AUTH0_TEST_DOMAIN: ${{secrets.AUTH0_DOMAIN_TEST}}
  AUTH0_AUDIENCE: ${{secrets.AUTH0_AUDIENCE}}
  AUTH0_TEST_AUDIENCE: ${{secrets.AUTH0_AUDIENCE_TEST}}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_TEST_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID_TEST }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_TEST_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET_TEST }}

jobs:

  userms-unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    environment: userms-test
    if: github.ref == 'refs/heads/development'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Restore dependencies
        run: dotnet restore UserMS/UserMS.sln

      - name: Build
        run: dotnet build UserMS/UserMS.sln --no-restore

      - name: Test
        run: dotnet test UserMS/UserMS.sln --no-build --verbosity normal

  docker-upload-test:
    runs-on: ubuntu-20.04
    name: Build and Push Docker Test Environment Image
    needs: userms-unit-tests
    if: github.ref == 'refs/heads/development'
    environment: userms-test
    steps:
      - uses: actions/checkout@v3 # Check Out Code
      
      - name: Build from Dockerfile
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: test
          dockerfiles: ./UserMS/Dockerfile
          context: ./UserMS/
      - name: Login to Docker Registry
        run: buildah login --username ${{ env.DOCKER_HUB_USERNAME }} --password ${{ env.DOCKER_HUB_ACCESS_TOKEN }} docker.io
        
      - name: Push new image to repository
        run: buildah push "${{ env.APP_NAME }}:test" "docker://docker.io/brumarq/${{ env.APP_NAME }}:test"
        
  deploy-test-env:
    runs-on: ubuntu-20.04
    needs: docker-upload-test
    name: Deploy to Test Environment
    if: github.ref == 'refs/heads/development'
    environment: userms-test
    steps:
      - uses: actions/checkout@v2 # Check Out Code
      - uses: redhat-actions/oc-login@v1 # Install OC cli and login
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TEST_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_TEST_NAMESPACE }}

      - name: Update YAML with Current Timestamp
        run: |
          CURRENT_TIMESTAMP=$(date +%Y%m%d%H%M%S)
          sed -i "s/\${TIMESTAMP}/${CURRENT_TIMESTAMP}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Set Image Version
        run: |
          ENVIRONMENT_TAG="test"
          sed -i "s/\${ENVIRONMENT}/${ENVIRONMENT_TAG}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Deploy to test environment
        run: |
          oc apply -f ./oc-deployments/${{ env.APP_NAME }}.yaml -n ${{ env.OPENSHIFT_TEST_NAMESPACE }}
          
      - name: Set environment variables 
        run: |
          oc set env deployment/${{ env.APP_NAME }} \
          Auth0__Domain=${{ env.AUTH0_TEST_DOMAIN }} \
          Auth0__Audience=${{ env.AUTH0_TEST_AUDIENCE }} \
          Auth0__ClientId=${{ env.AUTH0_TEST_CLIENT_ID }} \
          Auth0__ClientSecret=${{ env.AUTH0_TEST_CLIENT_SECRET }} \
          Auth0-Management__Domain=${{ secrets.AUTH0_MGMT_DOMAIN }} \
          Auth0-Management__Audience=${{ secrets.AUTH0_MGMT_AUDIENCE }} \
          Auth0-Management__ClientId=${{ secrets.AUTH0_MGMT_CLIENT_ID }} \
          Auth0-Management__ClientSecret=${{ secrets.AUTH0_MGMT_CLIENT_SECRET }} \
          Auth0-Roles__admin=${{ secrets.AUTH0_ROLE_ADMIN }} \
          Auth0-Roles__client=${{ secrets.AUTH0_ROLE_CLIENT }} \
          OrchestratorApiKey=${{ secrets.ORCHESTRATORAPIKEY }}

      - name: Create service if non-existent
        run: |
          SERVICE_EXISTS=$(oc get svc ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_TEST_NAMESPACE }} --ignore-not-found)
          if [ -z "$SERVICE_EXISTS" ]; then
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} --target-port=${{ env.APP_PORT }} --name=${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_TEST_NAMESPACE }}
          fi

      - name: Create route if non-existent
        run: |    
          ROUTE_EXISTS=$(oc get route ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_TEST_NAMESPACE }} --ignore-not-found)
          if [ -z "$ROUTE_EXISTS" ]; then
            oc create route edge --service=${{ env.APP_NAME }}-service --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_TEST_NAMESPACE }}
          fi

  docker-upload-production:
    runs-on: ubuntu-20.04
    name: Build and Push Docker Production Environment Image
    if: github.ref == 'refs/heads/main'
    environment: userms-production
    steps:
      - uses: actions/checkout@v3 # Check Out Code
      
      - name: Build from Dockerfile
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: production
          dockerfiles: ./UserMS/Dockerfile
          context: ./UserMS/
      - name: Login to Docker Registry
        run: buildah login --username ${{ env.DOCKER_HUB_USERNAME }} --password ${{ env.DOCKER_HUB_ACCESS_TOKEN }} docker.io
        
      - name: Push new image to repository
        run: buildah push "${{ env.APP_NAME }}:production" "docker://docker.io/brumarq/${{ env.APP_NAME }}:production"
          
  deploy-production-env:
    runs-on: ubuntu-20.04
    name: Deploy to Production Environment
    needs: docker-upload-test
    if: github.ref == 'refs/heads/main'
    environment: userms-production
    steps:
      - uses: actions/checkout@v2
      - uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Update YAML with Current Timestamp
        run: |
          CURRENT_TIMESTAMP=$(date +%Y%m%d%H%M%S)
          sed -i "s/\${TIMESTAMP}/${CURRENT_TIMESTAMP}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
      
      - name: Set Image Version
        run: |
          ENVIRONMENT_TAG="production"
          sed -i "s/\${ENVIRONMENT}/${ENVIRONMENT_TAG}/g" ./oc-deployments/${{ env.APP_NAME }}.yaml
          
      - name: Deploy to OpenShift
        run: |
          oc apply -f ./oc-deployments/${{ env.APP_NAME }}.yaml -n ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Set environment variables 
        run: |
          oc set env deployment/${{ env.APP_NAME }} \
          Auth0__Domain=${{ env.AUTH0_DOMAIN }} \
          Auth0__Audience=${{ env.AUTH0_AUDIENCE }} \
          Auth0__ClientId=${{ env.AUTH0_CLIENT_ID }} \
          Auth0__ClientSecret=${{ env.AUTH0_CLIENT_SECRET }} \
          Auth0-Management__Domain=${{ secrets.AUTH0_MGMT_DOMAIN }} \
          Auth0-Management__Audience=${{ secrets.AUTH0_MGMT_AUDIENCE }} \
          Auth0-Management__ClientId=${{ secrets.AUTH0_MGMT_CLIENT_ID }} \
          Auth0-Management__ClientSecret=${{ secrets.AUTH0_MGMT_CLIENT_SECRET }} \
          Auth0-Roles__admin=${{ secrets.AUTH0_ROLE_ADMIN }} \
          Auth0-Roles__client=${{ secrets.AUTH0_ROLE_CLIENT }} \
          OrchestratorApiKey=${{ secrets.ORCHESTRATORAPIKEY }}

      - name: Create service if non-existent
        run: |
          SERVICE_EXISTS=$(oc get svc ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$SERVICE_EXISTS" ]; then
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} --target-port=${{ env.APP_PORT }} --name=${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi

      - name: Create oute if non-existent
        run: |   
          ROUTE_EXISTS=$(oc get route ${{ env.APP_NAME }}-service -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found)
          if [ -z "$ROUTE_EXISTS" ]; then
            oc create route edge --service=${{ env.APP_NAME }}-service --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          fi
