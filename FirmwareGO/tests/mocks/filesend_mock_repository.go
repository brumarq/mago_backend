// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/repositories/interfaces/IRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"FirmwareGO/domain/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// IsDatabaseConnected mocks base method.
func (m *MockIRepository) IsDatabaseConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDatabaseConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDatabaseConnected indicates an expected call of IsDatabaseConnected.
func (mr *MockIRepositoryMockRecorder) IsDatabaseConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDatabaseConnected", reflect.TypeOf((*MockIRepository)(nil).IsDatabaseConnected))
}

// Create mocks base method.
func (m *MockIRepository) Create(ctx context.Context, entity **entities.FileSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockIRepository) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockIRepository) GetAll(ctx context.Context) ([]*entities.FileSend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entities.FileSend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepository)(nil).GetAll), ctx)
}

// GetByCondition mocks base method.
func (m *MockIRepository) GetByCondition(ctx context.Context, condition map[string]interface{}) (**entities.FileSend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCondition", ctx, condition)
	ret0, _ := ret[0].(**entities.FileSend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCondition indicates an expected call of GetByCondition.
func (mr *MockIRepositoryMockRecorder) GetByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCondition", reflect.TypeOf((*MockIRepository)(nil).GetByCondition), ctx, condition)
}

// GetCollectionByCondition mocks base method.
func (m *MockIRepository) GetCollectionByCondition(ctx context.Context, condition map[string]interface{}, orderBy ...string) ([]*entities.FileSend, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, condition}
	for _, a := range orderBy {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollectionByCondition", varargs...)
	ret0, _ := ret[0].([]*entities.FileSend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByCondition indicates an expected call of GetCollectionByCondition.
func (mr *MockIRepositoryMockRecorder) GetCollectionByCondition(ctx, condition interface{}, orderBy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, condition}, orderBy...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByCondition", reflect.TypeOf((*MockIRepository)(nil).GetCollectionByCondition), varargs...)
}

// Update mocks base method.
func (m *MockIRepository) Update(ctx context.Context, entity **entities.FileSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), ctx, entity)
}
